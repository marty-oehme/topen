#!/usr/bin/env python
# Open or create a note file
# for a taskwarrior task.
# Takes a taskwarrior ID or UUID for a single task.
# Edits an existing task note file,
# or creates a new one.

import argparse
import subprocess
import sys
from pathlib import Path

from tasklib import Task, TaskWarrior

TASK_DATA_DIR = "~/.local/share/task"

TOPEN_DIR = "~/.local/share/task/notes"
TOPEN_EXT = "md"
TOPEN_ANNOT = "Note"


def parse_cli() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Taskwarrior note editing made easy.")
    _ = parser.add_argument(
        "id", help="The id/uuid of the taskwarrior task for which we edit notes"
    )
    _ = parser.add_argument(
        "-d",
        "--notes-dir",
        default=TOPEN_DIR,
        help="Location of topen notes",
    )
    _ = parser.add_argument(
        "-x", "--extension", default=TOPEN_EXT, help="Extension of note files"
    )
    _ = parser.add_argument(
        "-t",
        "--annotation",
        default=TOPEN_ANNOT,
        help="Annotation content to set within taskwarrior",
    )
    _ = parser.add_argument(
        "--task-data", default=TASK_DATA_DIR, help="Location of taskwarrior data"
    )

    return parser.parse_args()


def main():
    args = parse_cli()

    if not args.id:
        _ = sys.stderr.write("Please provide task ID as argument.\n")

    task = get_task(id=args.id, data_location=args.task_data)
    uuid = task["uuid"]
    if not uuid:
        _ = sys.stderr.write(f"Could not find task for id: {args.id}.")
        sys.exit(1)
    fname = get_notes_file(uuid, notes_dir=args.notes_dir, notes_ext=args.extension)

    # TODO: Add editor choice
    open_editor(fname)

    add_annotation_if_missing(task, annotation_content=args.annotation)


def get_task(id: str, data_location: str = TASK_DATA_DIR) -> Task:
    tw = TaskWarrior(data_location)
    try:
        t = tw.tasks.get(id=id)
    except Task.DoesNotExist:
        t = tw.tasks.get(uuid=id)

    return t


def get_notes_file(
    uuid: str, notes_dir: str = TOPEN_DIR, notes_ext: str = TOPEN_EXT
) -> Path:
    return Path(notes_dir).joinpath(f"{uuid}.{notes_ext}")


def open_editor(file: Path, editor: str = "nvim") -> None:
    _ = sys.stderr.write(f"Editing note {file}\n")
    proc = subprocess.Popen(f"{editor} {file}", shell=True)
    _ = proc.wait()


def add_annotation_if_missing(
    task: Task, annotation_content: str = TOPEN_ANNOT
) -> None:
    for annot in task["annotations"] or []:
        if annot["description"] == annotation_content:
            return
    task.add_annotation(annotation_content)
    _ = sys.stderr.write("Added annotation.\n")


if __name__ == "__main__":
    main()
